from flask import Flask, render_template, request, session
import pandas as pd

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # 设置会话密钥，请替换为实际的安全密钥

####################################兴趣特长####################################
# 小众特长
p1a1_ = "小众特长"
p1a1 = ["环球飞行", "无线电控制飞机", "哈巴狗训练", "帆船赛", "车载露营", "水下摄影", "高尔夫车道设计","星座观测", "曲艺表演", "无人机制作",
        "风筝制作", "古董收藏", "刺绣", "木雕", "霹雳舞", "城市探险", "极限体验", "环保志愿者", "水晶收藏", "雪橇犬比赛"]

# 运动装备
p1a2_ = "运动装备"
p1a2 = ["篮球", "足球", "羽毛球拍", "网球拍", "棒球棍", "排球", "乒乓球拍", "游泳帽", "跑鞋", "滑雪板", "冰球杆", "哑铃", "自行车",
        "赛车头盔", "高尔夫球杆", "拳击手套", "赛马鞍具", "滑冰鞋", "跳高杆", "体操绳"]

# 学习方法
p1a3_ = p1a4_ = "学习方法"
p1a3 = p1a4 = ["目标设置", "时间管理", "积极学习", "学习方法", "资源利用", "合作学习", "反馈和评估", "挑战与克服", "跨学科学习",
               "实际应用", "反思与改进", "心理和情感", "专业发展", "科学和研究", "数字化学习"]

# 兴趣保持
p1a5_ = "兴趣保持"
p1a5 = ["持续学习", "探索新领域", "与同行交流", "爱好发展", "目标与挑战", "目标设定", "持续进步"]

# 姿势保持
p1a6_ = "知识保持"
p1a6 = ["自我纠正", "指导", "练习计划", "反馈与改进", "专注与意识", "标准参考", "追求卓越", "技术培训", "视频分析工具"]

# 课后收拾
p1a7_ = "课后收拾"
p1a7 = ["整理与清理", "时间管理", "工具与资源", "简化流程", "个人习惯", "团队协作", "数字工具", "教育机构支持", "清洁与维护",
        "记录与追踪", "持续改进", "社交支持"]

# 运动保护
p1a8_ = "运动保护"
p1a8 = ["身体准备", "适当装备", "学习技能", "合理训练", "自我保护", "安全环境", "紧急情况应对", "监测健康", "遵守规则", "保护听觉和视觉",
        "心理健康", "社交支持", "保险和法律事务"]

# 安静练习
p1a9_ = "个人练习"
p1a9= ["场地共享", "音量控制", "交流尊重", "设备共享", "时间规划", "遵守规则", "清洁卫生", "共享资源", "自我监管", "社交礼仪", "避免分散注意力"]

####################################校园学习####################################
# 课堂高效
p1b1_ = "课堂高效"
p1b1 = ["教学计划", "教学方法", "课堂管理", "学生参与", "资源利用", "个性化教育", "时间管理", "沟通技巧", "自我管理", "持续专业发展",
        "团队合作", "教育技术应用", "反馈与评估", "关心学生健康", "教育政策了解"]

# 晦涩知识
p1b2_ = "晦涩知识"
p1b2 = ["积极思维", "深度阅读", "概念图示", "实际应用", "问题解决", "学习小组", "寻求帮助", "教学资源", "自我测试", "多角度学习",
        "专业指导", "耐心与毅力", "学习技巧", "外部实践", "知识整合"]

# 校园霸凌&校园安全&校园人性化
p1b3_ = p1b5_ = p1b7_ = "校园霸凌与安全"
p1b3 = p1b5 = p1b7 = ["教育和宣传", "制定反霸凌政策", "建立安全环境", "培训教职员工", "鼓励举报", "提供心理支持", "社交技能培训", "家庭参与",
                      "举办意识活动", "处罚制度", "关注特殊群体", "疏导和调解", "数据监测", "互联网安全教育", "社交媒体管理", "扶助受害者"]

# 学习焦虑
p1b4_ = "学习焦虑"
p1b4 = ["时间管理", "目标设定", "规划学习", "积极思维", "健康生活", "休息与放松", "学习方法", "自我评估", "寻求帮助", "社交支持", "心理健康",
        "应对挑战", "减少压力", "专注力训练", "建立自信", "应对失败"]

# 智能教室
p1b6_ = "智能教室"
p1b6 = ["数字化教学工具", "智能白板", "在线学习平台", "虚拟实验室", "自适应学习系统", "智能教室管理", "学生跟踪和分析", "互动教学应用",
        "远程教育技术", "无纸化学习环境", "智能评估和反馈", "教育数据分析", "自动化学生管理", "创新教育方法", "智能教材和资源", "教师培训与支持"]

# 食物中毒
p1b8_ = "校园食物中毒"
p1b8 = ["食材安全检测", "食品储存和处理规范", "卫生标准和监督", "食品供应链追踪", "员工培训和卫生意识", "食品安全法规遵守",
        "食品过敏和特殊饮食需求", "食品配方管理", "食品供应商合作和审核", "定期食品安全检查", "食品卫生紧急应对计划",
        "食品储存和供应设施维护", "学生和家长教育", "校园餐饮政策和流程改进", "食品安全文化建设"]

# 保护教具
p1b9_ = "保护教具"
p1b9 = ["教师培训与支持", "教具资源管理", "教室设备维护", "使用教具的指导", "教具共享与借用", "教具更新与升级", "教具使用监测", "学生参与与兴趣培养",
        "教学方法创新", "教学计划整合教具", "教具维护和保养培训", "资源管理工具", "教育技术支持", "教学场地规划", "学校教具政策"]

# 字典合集
questions = {"p1a1":p1a1_, "p1a2":p1a2_, "p1a3":p1a3_, "p1a4":p1a4_, "p1a5":p1a5_, "p1a6":p1a6_,
             "p1a7":p1a7_, "p1a8":p1a8_, "p1a9":p1a9_,
             "p1b1":p1b1_, "p1b2":p1b2_, "p1b3":p1b3_, "p1b4":p1b4_, "p1b5":p1b5_, "p1b6":p1b6_,
             "p1b7":p1b7_, "p1b8":p1b8_, "p1b9":p1b9_}
answers = {"p1a1":p1a1, "p1a2":p1a2, "p1a3":p1a3, "p1a4":p1a4, "p1a5":p1a5, "p1a6":p1a6,
           "p1a7":p1a7, "p1a8":p1a8, "p1a9":p1a9,
           "p1b1":p1b1, "p1b2":p1b2, "p1b3":p1b3, "p1b4":p1b4, "p1b5":p1b5, "p1b6":p1b6,
           "p1b7":p1b7, "p1b8":p1b8, "p1b9":p1b9}


excel_file_path = 'data/创意赛获奖名单.xlsx'
xls = pd.ExcelFile(excel_file_path)

all_data = {}
for sheet_name in xls.sheet_names:
    all_data[sheet_name] = pd.read_excel(xls, sheet_name)


@app.route('/', methods=['GET', 'POST'])
def index():
    if 'query_result' not in session:
        session['query_result'] = None

    if request.method == 'POST':
        query_type = request.form.get('query_type')
        if query_type == '2':
            query = request.form.get("query_word")
            if query in questions:
                related_question = questions[query]
                related_keywords = answers[query]
                session['query_result'] = f"相关的问题为: {related_question}<br>相关的关键词为: {', '.join(related_keywords)}"

        elif query_type == '1':
            query_word = request.form.get('query_word')
            session['query_result'] = get_search_results(query_word)

    return render_template('index.html', query_result=session.get('query_result'))


def get_search_results(query_word):
    results = ""
    for sheet_name in all_data.keys():
        data = all_data[sheet_name].dropna(how='any')
        contains_word = data['项目名称'].str.contains(query_word)
        if not data[contains_word].empty:
            results += f"{sheet_name}<br>{data[contains_word].reset_index(drop=True).to_html()}<br>"
    return results


if __name__ == '__main__':
    app.run(debug=True)
